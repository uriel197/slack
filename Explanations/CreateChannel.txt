How a channel is created
========================

The eventListener is placed in the individual users listed in alertDirectMessageList/UserListItem.js:

class UserListItem extends Component {
  constructor(props) {
    super(props);
  }

  render = () => {
    return `
      <li onclick="alertDirectMessageList.sendDirectMessage(event, '${this.props.user.id}', '${this.props.user.username}')" data-username="${this.props.user.username}" class="alert__user-list-item">
        <div>
          <div class="alert__user-list-item-image"></div>
        </div>
        <span class="alert__user-list-item-name">${this.props.user.username}</span>
      </li>
    `;
  };
}


When the user is clicked the function "sendDirectMessage" in alertDirectMessageList/AlertDirectMessageList is fired:

  sendDirectMessage = async (event, userToMessageId, userToMessageName) => {
    event.preventDefault();
    const currentUser = this.getStoreState().app.user;
    const incomingChannel = await createChannel(
      `${currentUser.username},${userToMessageName}`,
      [currentUser.id, userToMessageId],
      "directMessage"
    );
    const channel = Channel(incomingChannel, currentUser);
    window.socket.emit("first-direct-message", {
      userId: userToMessageId,
      channelId: channel.id,
    });
    this.dispatch(CloseAlert());
    window.location.hash = `#/channels/${channel.id}`;
  };

the createChannel here is found in api/channelsApi.js which is an API to the server that sends the data required to create the channel:

const createChannel = async (name, usersInChannel, type) => {
  const req = Request("POST", { name, usersInChannel, type });
  const res = await fetch("/api/v1/channels", req);
  return res.json();
};

Then the server processes the request in routes/channelRoutes.js:

router.post(
  "/api/v1/channels",
  isLoggedIn,
  catchError(async (req, res) => {
    const { name, usersInChannel, type } = req.body;
    const channel = await channelService.createChannel(
      name,
      type,
      usersInChannel
    );
    res.json(channel);
  })
);

The server takes this data and uses it in createChannel in services/channelService/ChannelService.js:

createChannel = async (name, type, usersInChannel) => {
    const fingerprint = Buffer.from(name.split("").sort().join("")).toString(
      "base64"
    );
    const channel = await this.Model.findOne({ fingerprint });
    if (channel) return channel;
    return new this.Model({
      name,
      fingerprint,
      type,
      usersInChannel,
    }).save();
  };
