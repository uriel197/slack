    HOW CLIENT INTERACTS WITH BACKEND
    =================================

The following code demonstrates how the client interacts with the backend API to fetch or create a "general" channel dynamically whether channels exist or not. Here's the flow broken down step by step:

Client side
===========

Calling getChannels()
let channels = await getChannels();
Purpose: Fetches the list of existing channels from the server using the Request() and getChannels() functions from the api folder to send the fetch request to the /api/v1/channels endpoint with the generated configuration.
Server Parses and returns the response as JSON.

Outcome:
channels will either contain the array of channels retrieved from the server or return an empty array.

Check if channels is Empty
==========================
if (channels.length < 1) { ... }
Purpose: Determines whether any channels exist.
Condition: If channels has a length less than 1 (empty array), the block inside the if statement executes.

Creating the General Channel
============================
const generalChannel = await createChannel("general");
channels = [generalChannel];

Purpose: Creates a "general" channel by calling the POST /api/v1/channels endpoint with the channel name "general".

Implementation:
Invokes the Request function with method set to "POST".
data set to { name: "general" }.
Sends the fetch request to the server with the generated configuration.
Server Parses and returns the newly created channel object as JSON.

Outcome:
generalChannel will contain the newly created channel 

Storing the Result in generalChannel
====================================
After the API call completes, the returned JSON object (representing the channel) is stored in the generalChannel variable on the frontend:

const generalChannel = await createChannel("general");
At this point:

generalChannel = {
    "_id": "6758a77857c1af50b945ad8e",
    "name": "general",
    "usersInChannel": [],
    "__v": 0
};
Assigning channels

The channels array is then set to include only the generalChannel:

channels = [generalChannel];
This is equivalent to:

channels = [
    {
        "_id": "6758a77857c1af50b945ad8e",
        "name": "general",
        "usersInChannel": [],
        "__v": 0
    }
];

Post-Flow
=========
At the end of the block, the channels variable will either:
Contain the array of channels fetched from the server, or
Contain a single channel, the newly created "general" channel, if the original list was empty.

Server-side code in App.js
==========================

app.get(
  "/api/v1/channels",
  catchError(async (req, res) => {
    const channels = await channelService.getChannels();
    res.json(channels);
  })
);

app.post(
  "/api/v1/channels",
  catchError(async (req, res) => {
    const { name } = req.body;
    const channel = await channelService.createChannel(name);
    res.json(channel);
  })
);

*** Note on http modules and IO:
================================
http.Server() and http.createServer() are equivalent in functionality, but there is a slight difference in how they're used:

http.createServer()
======================
A shorthand method to create an HTTP server.
If passed a callback (e.g., a request handler), it automatically sets it up as the server's 'request' event listener.

const http = require("http");
const server = http.createServer((req, res) => {
  res.writeHead(200, { "Content-Type": "text/plain" });
  res.end("Hello, World!");
});

http.Server()
=============
Directly creates an HTTP server instance without assigning a request listener.
You must manually add listeners to handle requests.

What Is Socket.IO?
==================
Socket.IO is a library that enables real-time, bidirectional, and event-driven communication between web clients and servers. It provides additional features like:

* Enable Real-Time Features:
    With Socket.IO, your app can instantly send and receive messages between clients and the server without requiring a page reload.

* Set Up Communication Protocols:
    By listening for WebSocket events (connection, message), you set the foundation for real-time features like live chat or notifications.

* Support Client-Side Socket.IO:
    Socket.IO ensures the server can communicate with client-side scripts using a similar API.

Example Workflow:
Client Connects:

A client establishes a WebSocket connection:
    const socket = io(); // Client-side

Client Sends a Message:
    socket.emit("message", "Hello, server!");

Server Receives and Logs the Message:
    socket.on("message", (message) => {
        console.log(message); // "Hello, server!"
    });

Server Responds:
    socket.emit("response", "Message received!");

Client Receives the Response:
    socket.on("response", (data) => {
        console.log(data); // "Message received!"
    });


* io.on("connection", callback)
    Purpose: Listens for a specific event ("connection") on the io instance.
    This means the server is waiting for a client to connect. When a client establishes a connection, the callback is executed with the socket object representing that connection.
    Key Point: This is a listener, not an emitter. It's triggered by the client connecting.

* socket.on("message", callback)
    Purpose: Listens for a specific event ("message") from the connected client.
    This means the server is waiting for the client to send a "message" event, and when it receives it, the callback is executed with the data sent by the client.

Key Point: This is also a listener, specifically for events sent by the client.

* emit
    Purpose: Emits an event. This is used to send data to the other side (client or server).
    For example:
    Server to Client: socket.emit("eventName", data)
    Client to Server: socket.emit("eventName", data)
    emit is the action, while on listens for that action.
